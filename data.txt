const { createMachine, createActor, assign } = require("xstate");
const axios = require("axios");

const apiMachine = createMachine({
  id: "apiRequest",
  initial: "loading", 
  context: {
    data: null,
    error: null,
    endpoint: null, 
  },
  states: {
    loading: {
      invoke: {
        src: "fetchData",
        onDone: { target: "success", actions: "setData" },
        onError: { target: "failure", actions: "setError" },
      },
    },
    success: {
      type: "final",
    },
    failure: {
      type: "final",
    },
  },
}, {
  actions: {
    setData: assign((context, event) => ({ data: event.output, error: null })),
    setError: assign((context, event) => ({ error: event.error })),
  },
  services: {
    services: {
        fetchData: async (context) => {
            
          try {
            const response = await axios.post(context.endpoint, context.data);
            return response.data;
          } catch (error) {
            console.error("Error in fetchData service:", error);
          }
        },
      },
  },
});

















const express = require("express");
const { createActor } = require("xstate");
const apiMachine = require('./src/Machines/machine')
const cors=require('cors'); 


const app = express();
app.use(express.json());
app.use(cors())


app.post("/api/login", async (req, res) => {

    const endpoint = 'http://10.51.41.12:8082/users/login';
    const data = req.body;
    console.log("Payload before hitting api" + JSON.stringify(data));
  
    if (!endpoint) return res.status(400).json({ error: "URL is required" });
  
    try {
      const service = createActor(apiMachine,{
        context: { endpoint, data } 
      });
  
        service.start();   
        const initialState = service.getSnapshot();
        console.log("FSM Initial State:", initialState);
  
    //   service.stop(); 
    } catch (error) {
        console.log(error)
      res.status(500).json({ error: "Unexpected error occurred" });
    }
  });
  
  app.listen(3000, () => console.log("Server running on port 3000"));


module.exports = { apiMachine, createActor };














Server running on port 3000
Payload before hitting api{"branchCode":"0002","username":"tsting","password":"login11111"}
FSM Initial State: {
  status: 'error',
  output: undefined,
  error: TypeError: Cannot read properties of undefined (reading 'getSnapshot')
      at /home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/xstate.cjs.js:494:17
      at Array.forEach (<anonymous>)
      at StateMachine.start (/home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/xstate.cjs.js:493:38)
      at Actor.start (/home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/raise-60cebf03.cjs.js:835:20)
      at /home/bahl/Desktop/TestVue/FSM/server.js:25:17
      at Layer.handle [as handle_request] (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/layer.js:95:5)
      at next (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/route.js:149:13)
      at Route.dispatch (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/route.js:119:3)
      at Layer.handle [as handle_request] (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/layer.js:95:5)
      at /home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/index.js:284:15,
  machine: <ref *1> StateMachine {
    config: {
      id: 'apiRequest',
      initial: 'loading',
      context: [Object],
      states: [Object]
    },
    version: undefined,
    schemas: undefined,
    implementations: { actors: {}, actions: [Object], delays: {}, guards: {} },
    __xstatenode: true,
    idMap: Map(4) {
      'apiRequest' => [StateNode],
      'apiRequest.loading' => [StateNode],
      'apiRequest.success' => [StateNode],
      'apiRequest.failure' => [StateNode]
    },
    root: StateNode {
      config: [Object],
      key: 'apiRequest',
      id: 'apiRequest',
      type: 'compound',
      path: [],
      states: [Object],
      history: false,
      entry: [],
      exit: [],
      parent: undefined,
      machine: [Circular *1],
      meta: undefined,
      output: undefined,
      order: 0,
      description: undefined,
      tags: [],
      transitions: Map(0) {},
      always: undefined
    },
    id: 'apiRequest',
    states: {
      loading: [StateNode],
      success: [StateNode],
      failure: [StateNode]
    },
    events: [
      'xstate.done.actor.0.apiRequest.loading',
      'xstate.error.actor.0.apiRequest.loading'
    ],
    transition: [Function: bound transition],
    getInitialSnapshot: [Function: bound getInitialSnapshot],
    getPersistedSnapshot: [Function: bound getPersistedSnapshot],
    restoreSnapshot: [Function: bound restoreSnapshot],
    start: [Function: bound start]
  },
  context: { data: null, error: null, endpoint: null },
  _nodes: [
    StateNode {
      config: [Object],
      key: 'apiRequest',
      id: 'apiRequest',
      type: 'compound',
      path: [],
      states: [Object],
      history: false,
      entry: [],
      exit: [],
      parent: undefined,
      machine: [StateMachine],
      meta: undefined,
      output: undefined,
      order: 0,
      description: undefined,
      tags: [],
      transitions: Map(0) {},
      always: undefined
    },
    StateNode {
      config: [Object],
      key: 'loading',
      id: 'apiRequest.loading',
      type: 'atomic',
      path: [Array],
      states: {},
      history: false,
      entry: [],
      exit: [],
      parent: [StateNode],
      machine: [StateMachine],
      meta: undefined,
      output: undefined,
      order: 1,
      description: undefined,
      tags: [],
      transitions: [Map],
      always: undefined
    }
  ],
  value: 'loading',
  tags: Set(0) {},
  children: { '0.apiRequest.loading': undefined },
  historyValue: {},
  matches: [Function: matches],
  hasTag: [Function: hasTag],
  can: [Function: can],
  getMeta: [Function: getMeta],
  toJSON: [Function: toJSON]
}
/home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/raise-60cebf03.cjs.js:128
    throw err;
    ^

TypeError: Cannot read properties of undefined (reading 'getSnapshot')
    at /home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/xstate.cjs.js:494:17
    at Array.forEach (<anonymous>)
    at StateMachine.start (/home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/xstate.cjs.js:493:38)
    at Actor.start (/home/bahl/Desktop/TestVue/FSM/node_modules/xstate/dist/raise-60cebf03.cjs.js:835:20)
    at /home/bahl/Desktop/TestVue/FSM/server.js:25:17
    at Layer.handle [as handle_request] (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/route.js:149:13)
    at Route.dispatch (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/route.js:119:3)
    at Layer.handle [as handle_request] (/home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/layer.js:95:5)
    at /home/bahl/Desktop/TestVue/FSM/node_modules/express/lib/router/index.js:284:15

Node.js v22.14.0
